{"version":3,"file":"index.cjs","sources":["../../src/node/index.cjs.ts"],"sourcesContent":["// CommonJS entry point that provides the expected interface:\n// const pangu = require('pangu') -> gives pangu instance directly\nimport { Pangu } from '../shared/index';\nimport { readFileSync } from 'node:fs';\nimport { readFile } from 'node:fs/promises';\n\n// Re-implement NodePangu here to avoid circular imports\nclass NodePangu extends Pangu {\n  async spacingFile(path: string): Promise<string> {\n    const data = await readFile(path, 'utf8');\n    return this.spacingText(data);\n  }\n\n  spacingFileSync(path: string): string {\n    return this.spacingText(readFileSync(path, 'utf8'));\n  }\n}\n\n// Create the pangu instance\nconst pangu = new NodePangu();\n\n// Add named exports as properties on the instance\n// This allows both: const pangu = require('pangu') AND const { NodePangu } = require('pangu')\n/* eslint-disable @typescript-eslint/no-explicit-any */\n(pangu as any).NodePangu = NodePangu;\n(pangu as any).pangu = pangu;\n(pangu as any).default = pangu;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// Export pangu instance as the module\n// @ts-expect-error - Using CommonJS export for compatibility\nexport = pangu;\n"],"names":[],"mappings":";AAEA,IAAsB,gBAAA,QAAA,iBAAA;AACtB,IAA6B,iBAAA,QAAA,SAAA;AAC7B,IAAyB,kBAAA,QAAA,kBAAA;AAGzB,MAAM,kBAAkB,cAAM,MAAA;AAAA,EAC5B,MAAM,YAAY,MAA+B;AAC/C,UAAM,OAAO,OAAM,GAAA,gBAAS,UAAA,MAAM,MAAM;AACjC,WAAA,KAAK,YAAY,IAAI;AAAA,EAAA;AAAA,EAG9B,gBAAgB,MAAsB;AACpC,WAAO,KAAK,aAAY,GAAA,eAAa,cAAA,MAAM,MAAM,CAAC;AAAA,EAAA;AAEtD;AAGA,MAAM,QAAQ,IAAI,UAAU;AAK3B,MAAc,YAAY;AAC1B,MAAc,QAAQ;AACtB,MAAc,UAAU;AAKzB,OAAS,UAAA;"}