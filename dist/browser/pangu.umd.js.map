{"version":3,"file":"pangu.umd.js","sources":["../../src/shared/index.ts","../../src/browser/pangu.ts","../../src/browser/pangu.umd.ts"],"sourcesContent":["// CJK is short for Chinese, Japanese, and Korean:\n// \\u2e80-\\u2eff CJK Radicals Supplement\n// \\u2f00-\\u2fdf Kangxi Radicals\n// \\u3040-\\u309f Hiragana\n// \\u30a0-\\u30ff Katakana\n// \\u3100-\\u312f Bopomofo\n// \\u3200-\\u32ff Enclosed CJK Letters and Months\n// \\u3400-\\u4dbf CJK Unified Ideographs Extension A\n// \\u4e00-\\u9fff CJK Unified Ideographs\n// \\uf900-\\ufaff CJK Compatibility Ideographs\n//\n// ANS is short for Alphabets, Numbers, and Symbols:\n// A includes A-Za-z\\u0370-\\u03ff\n// N includes 0-9\n// S includes `~!@#$%^&*()-_=+[]{}\\|;:'\",<.>/?\n//\n// All J below does not include \\u30fb\n// Some S below does not include all symbols\n//\n// For more information about Unicode blocks, see\n// https://symbl.cc/en/unicode-table/\n\nconst CJK = '\\u2e80-\\u2eff\\u2f00-\\u2fdf\\u3040-\\u309f\\u30a0-\\u30fa\\u30fc-\\u30ff\\u3100-\\u312f\\u3200-\\u32ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff';\n\n// prettier-ignore\n// Unix absolute paths: system dirs + common project paths\n// Examples: /home, /usr/bin, /etc/nginx.conf, /.bashrc, /node_modules/@babel/core, /path/to/your/project\nconst UNIX_ABSOLUTE_FILE_PATH = /\\/(?:\\.?(?:home|root|usr|etc|var|opt|tmp|dev|mnt|proc|sys|bin|boot|lib|media|run|sbin|srv|node_modules|path|project|src|dist|test|tests|docs|templates|assets|public|static|config|scripts|tools|build|out|target|your)|\\.(?:[A-Za-z0-9_\\-]+))(?:\\/[A-Za-z0-9_\\-\\.@\\+\\*]+)*/;\n\n// prettier-ignore\n// Unix relative paths common in documentation and blog posts\n// Examples: src/main.py, dist/index.js, test/spec.js, ./.claude/CLAUDE.md, templates/*.html\nconst UNIX_RELATIVE_FILE_PATH = /(?:\\.\\/)?(?:src|dist|test|tests|docs|templates|assets|public|static|config|scripts|tools|build|out|target|node_modules|\\.claude|\\.git|\\.vscode)(?:\\/[A-Za-z0-9_\\-\\.@\\+\\*]+)+/;\n\n// Windows paths: C:\\Users\\name\\, D:\\Program Files\\, C:\\Windows\\System32\nconst WINDOWS_FILE_PATH = /[A-Z]:\\\\(?:[A-Za-z0-9_\\-\\. ]+\\\\?)+/;\n\nconst ANY_CJK = new RegExp(`[${CJK}]`);\n\n// The symbol part only includes ~ ! ; : , . ? but . only matches one character\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK = new RegExp(`([${CJK}])[ ]*([\\\\:]+|\\\\.)[ ]*([${CJK}])`, 'g');\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS = new RegExp(`([${CJK}])[ ]*([~\\\\!;,\\\\?]+)[ ]*`, 'g');\nconst DOTS_CJK = new RegExp(`([\\\\.]{2,}|\\u2026)([${CJK}])`, 'g');\nconst FIX_CJK_COLON_ANS = new RegExp(`([${CJK}])\\\\:([A-Z0-9\\\\(\\\\)])`, 'g');\n\n// The symbol part does not include '\nconst CJK_QUOTE = new RegExp(`([${CJK}])([\\`\"\\u05f4])`, 'g');\nconst QUOTE_CJK = new RegExp(`([\\`\"\\u05f4])([${CJK}])`, 'g');\nconst FIX_QUOTE_ANY_QUOTE = /([`\"\\u05f4]+)[ ]*(.+?)[ ]*([`\"\\u05f4]+)/g;\n\n// Handle curly quotes with alphanumeric characters\n// These patterns should only apply to curly quotes, not straight quotes\n// Straight quotes are already handled by CJK_QUOTE, QUOTE_CJK and FIX_QUOTE_ANY_QUOTE\nconst QUOTE_AN = /([\\u201d])([A-Za-z0-9])/g; // Only closing curly quotes + AN\n\n// Special handling for straight quotes followed by alphanumeric after CJK\n// This catches patterns like: 社\"DF where the quote appears to be closing a quoted CJK phrase\nconst CJK_QUOTE_AN = new RegExp(`([${CJK}])(\")([A-Za-z0-9])`, 'g');\n\nconst CJK_SINGLE_QUOTE_BUT_POSSESSIVE = new RegExp(`([${CJK}])('[^s])`, 'g');\nconst SINGLE_QUOTE_CJK = new RegExp(`(')([${CJK}])`, 'g');\nconst FIX_POSSESSIVE_SINGLE_QUOTE = new RegExp(`([A-Za-z0-9${CJK}])( )('s)`, 'g');\n\nconst HASH_ANS_CJK_HASH = new RegExp(`([${CJK}])(#)([${CJK}]+)(#)([${CJK}])`, 'g');\nconst CJK_HASH = new RegExp(`([${CJK}])(#([^ ]))`, 'g');\nconst HASH_CJK = new RegExp(`(([^ ])#)([${CJK}])`, 'g');\n\n// The symbol part only includes + - * = & (excluding | / < >)\nconst CJK_OPERATOR_ANS = new RegExp(`([${CJK}])([\\\\+\\\\-\\\\*=&])([A-Za-z0-9])`, 'g');\nconst ANS_OPERATOR_CJK = new RegExp(`([A-Za-z0-9])([\\\\+\\\\-\\\\*=&])([${CJK}])`, 'g');\n// Handle operators between alphanumeric characters when CJK is present in text\n// But exclude hyphens that are part of compound words\nconst ANS_OPERATOR_ANS = new RegExp(`([A-Za-z0-9])([\\\\+\\\\*=&])([A-Za-z0-9])`, 'g');\n// Special pattern for hyphens that are NOT part of compound words or dates\n// Space hyphens in these cases: letter-letter, letter-number, number-letter, version ranges (letter+number-number)\n// But NOT: pure number-number (dates like 2016-12-26)\nconst ANS_HYPHEN_ANS_NOT_COMPOUND = new RegExp(`([A-Za-z])(-(?![a-z]))([A-Za-z0-9])|([A-Za-z]+[0-9]+)(-(?![a-z]))([0-9])|([0-9])(-(?![a-z0-9]))([A-Za-z])`, 'g');\n\n// Slash patterns for operator vs separator behavior\nconst CJK_SLASH_CJK = new RegExp(`([${CJK}])([/])([${CJK}])`, 'g');\nconst CJK_SLASH_ANS = new RegExp(`([${CJK}])([/])([A-Za-z0-9])`, 'g');\nconst ANS_SLASH_CJK = new RegExp(`([A-Za-z0-9])([/])([${CJK}])`, 'g');\nconst ANS_SLASH_ANS = new RegExp(`([A-Za-z0-9])([/])([A-Za-z0-9])`, 'g');\n\n// Special handling for single letter grades/ratings (A+, B-, C*) before CJK\n// These should have space after the operator, not before\n// Use word boundary to ensure it's a single letter, not part of a longer word\nconst SINGLE_LETTER_GRADE_CJK = new RegExp(`\\\\b([A-Za-z])([\\\\+\\\\-\\\\*])([${CJK}])`, 'g');\n\n// Special handling for < and > as comparison operators (not brackets)\nconst CJK_LESS_THAN = new RegExp(`([${CJK}])(<)([A-Za-z0-9])`, 'g');\nconst LESS_THAN_CJK = new RegExp(`([A-Za-z0-9])(<)([${CJK}])`, 'g');\nconst CJK_GREATER_THAN = new RegExp(`([${CJK}])(>)([A-Za-z0-9])`, 'g');\nconst GREATER_THAN_CJK = new RegExp(`([A-Za-z0-9])(>)([${CJK}])`, 'g');\n// Handle < and > between alphanumeric characters when CJK is present in text\nconst ANS_LESS_THAN_ANS = new RegExp(`([A-Za-z0-9])(<)([A-Za-z0-9])`, 'g');\nconst ANS_GREATER_THAN_ANS = new RegExp(`([A-Za-z0-9])(>)([A-Za-z0-9])`, 'g');\n\n// The bracket part only includes ( ) [ ] { } < > “ ”\nconst CJK_LEFT_BRACKET = new RegExp(`([${CJK}])([\\\\(\\\\[\\\\{<>\\u201c])`, 'g');\nconst RIGHT_BRACKET_CJK = new RegExp(`([\\\\)\\\\]\\\\}<>\\u201d])([${CJK}])`, 'g');\nconst ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET = new RegExp(`([A-Za-z0-9${CJK}])[ ]*([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])`, 'g');\nconst LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK = new RegExp(`([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])[ ]*([A-Za-z0-9${CJK}])`, 'g');\n\nconst AN_LEFT_BRACKET = /([A-Za-z0-9])(?<!\\.[A-Za-z0-9]*)([\\(\\[\\{])/g;\nconst RIGHT_BRACKET_AN = /([\\)\\]\\}])([A-Za-z0-9])/g;\n\n// Special patterns for filesystem paths after CJK\nconst CJK_UNIX_ABSOLUTE_FILE_PATH = new RegExp(`([${CJK}])(${UNIX_ABSOLUTE_FILE_PATH.source})`, 'g');\nconst CJK_UNIX_RELATIVE_FILE_PATH = new RegExp(`([${CJK}])(${UNIX_RELATIVE_FILE_PATH.source})`, 'g');\nconst CJK_WINDOWS_PATH = new RegExp(`([${CJK}])(${WINDOWS_FILE_PATH.source})`, 'g');\n\n// Pattern for Unix paths ending with / followed by CJK\nconst UNIX_ABSOLUTE_FILE_PATH_SLASH_CJK = new RegExp(`(${UNIX_ABSOLUTE_FILE_PATH.source}/)([${CJK}])`, 'g');\nconst UNIX_RELATIVE_FILE_PATH_SLASH_CJK = new RegExp(`(${UNIX_RELATIVE_FILE_PATH.source}/)([${CJK}])`, 'g');\n\nconst CJK_ANS = new RegExp(`([${CJK}])([A-Za-z\\u0370-\\u03ff0-9@\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])`, 'g');\nconst ANS_CJK = new RegExp(`([A-Za-z\\u0370-\\u03ff0-9~\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=!;:,\\\\.\\\\?\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])([${CJK}])`, 'g');\n\nconst S_A = /(%)([A-Za-z])/g;\n\nconst MIDDLE_DOT = /([ ]*)([\\u00b7\\u2022\\u2027])([ ]*)/g;\n\nexport class Pangu {\n  version: string;\n\n  constructor() {\n    this.version = '6.1.1';\n  }\n\n  public spacingText(text: string) {\n    if (typeof text !== 'string') {\n      console.warn(`spacingText(text) only accepts string but got ${typeof text}`);\n      return text;\n    }\n\n    if (text.length <= 1 || !ANY_CJK.test(text)) {\n      return text;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    let newText = text;\n\n    // HTML tag processing variables\n    const htmlTags: string[] = [];\n    const HTML_TAG_PLACEHOLDER = '\\u0000HTML_TAG_PLACEHOLDER_';\n    let hasHtmlTags = false;\n\n    // Early return for HTML processing if no HTML tags present\n    if (newText.includes('<')) {\n      hasHtmlTags = true;\n      // More specific HTML tag pattern:\n      // - Opening tags: <tagname ...> or <tagname>\n      // - Closing tags: </tagname>\n      // - Self-closing tags: <tagname ... />\n      // This pattern ensures we only match actual HTML tags, not just any < > content\n      const HTML_TAG_PATTERN = /<\\/?[a-zA-Z][a-zA-Z0-9]*(?:\\s+[^>]*)?>/g;\n\n      // Replace all HTML tags with placeholders, but process attribute values\n      newText = newText.replace(HTML_TAG_PATTERN, (match) => {\n        // Process attribute values inside the tag\n        const processedTag = match.replace(/(\\w+)=\"([^\"]*)\"/g, (_attrMatch, attrName, attrValue) => {\n          // Process the attribute value with spacing\n          const processedValue = self.spacingText(attrValue);\n          return `${attrName}=\"${processedValue}\"`;\n        });\n\n        const index = htmlTags.length;\n        htmlTags.push(processedTag);\n        return `${HTML_TAG_PLACEHOLDER}${index}\\u0000`;\n      });\n    }\n\n    // https://stackoverflow.com/questions/4285472/multiple-regex-replace\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK, (_match, leftCjk, symbols, rightCjk) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${leftCjk}${fullwidthSymbols}${rightCjk}`;\n    });\n\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS, (_match, cjk, symbols) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${cjk}${fullwidthSymbols}`;\n    });\n\n    newText = newText.replace(DOTS_CJK, '$1 $2');\n    newText = newText.replace(FIX_CJK_COLON_ANS, '$1：$2');\n\n    newText = newText.replace(CJK_QUOTE, '$1 $2');\n    newText = newText.replace(QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_QUOTE_ANY_QUOTE, '$1$2$3');\n\n    // Handle quotes with alphanumeric - closing quotes followed by AN need space\n    newText = newText.replace(QUOTE_AN, '$1 $2');\n    // Opening quotes preceded by AN don't need space (they're handled by other patterns)\n\n    // Handle CJK followed by closing quote followed by alphanumeric\n    newText = newText.replace(CJK_QUOTE_AN, '$1$2 $3');\n\n    newText = newText.replace(CJK_SINGLE_QUOTE_BUT_POSSESSIVE, '$1 $2');\n    newText = newText.replace(SINGLE_QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_POSSESSIVE_SINGLE_QUOTE, \"$1's\");\n\n    // Early return for complex patterns that need longer text\n    const textLength = newText.length;\n\n    // Check slash count early to determine hashtag behavior\n    const slashCount = (newText.match(/\\//g) || []).length;\n\n    // Early return for slash processing if no slashes present\n    if (slashCount === 0) {\n      // Apply normal hashtag spacing without slash considerations\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(CJK_HASH, '$1 $2');\n      newText = newText.replace(HASH_CJK, '$1 $3');\n    } else if (slashCount <= 1) {\n      // Single or no slash - apply normal hashtag spacing\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(CJK_HASH, '$1 $2');\n      newText = newText.replace(HASH_CJK, '$1 $3');\n    } else {\n      // Multiple slashes - skip hashtag processing to preserve path structure\n      // But add space before final hashtag if it's not preceded by a slash\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(new RegExp(`([^/])([${CJK}])(#[A-Za-z0-9]+)$`), '$1$2 $3');\n    }\n\n    // Protect compound words from operator spacing\n    const COMPOUND_WORD_PLACEHOLDER = '\\uE002'; // Private Use Area character\n    const compoundWords: string[] = [];\n    let compoundIndex = 0;\n\n    // Pattern to detect compound words: alphanumeric-alphanumeric combinations that look like compound words/product names\n    // Examples: state-of-the-art, machine-learning, GPT-4o, real-time, end-to-end, gpt-4o, GPT-5, claude-4-opus\n    // Match: word-word(s) where at least one part contains lowercase letters OR contains mix of letters and numbers (like GPT-5)\n    const COMPOUND_WORD_PATTERN = /\\b(?:[A-Za-z0-9]*[a-z][A-Za-z0-9]*-[A-Za-z0-9]+|[A-Za-z0-9]+-[A-Za-z0-9]*[a-z][A-Za-z0-9]*|[A-Za-z]+-[0-9]+|[A-Za-z]+[0-9]+-[A-Za-z0-9]+)(?:-[A-Za-z0-9]+)*\\b/g;\n\n    // Store compound words and replace with placeholders\n    newText = newText.replace(COMPOUND_WORD_PATTERN, (match) => {\n      compoundWords[compoundIndex] = match;\n      return `${COMPOUND_WORD_PLACEHOLDER}${compoundIndex++}\\uE003`;\n    });\n\n    // Handle single letter grades (A+, B-, etc.) before general operator rules\n    // This ensures \"A+的\" becomes \"A+ 的\" not \"A + 的\"\n    newText = newText.replace(SINGLE_LETTER_GRADE_CJK, '$1$2 $3');\n\n    newText = newText.replace(CJK_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_HYPHEN_ANS_NOT_COMPOUND, (match, ...groups) => {\n      // Handle all patterns in the alternation\n      if (groups[0] && groups[1] && groups[2]) {\n        // First pattern: letter-alphanumeric\n        return `${groups[0]} ${groups[1]} ${groups[2]}`;\n      } else if (groups[3] && groups[4] && groups[5]) {\n        // Second pattern: version range (letter+number-number)\n        return `${groups[3]} ${groups[4]} ${groups[5]}`;\n      } else if (groups[6] && groups[7] && groups[8]) {\n        // Third pattern: number-letter\n        return `${groups[6]} ${groups[7]} ${groups[8]}`;\n      }\n      return match;\n    });\n\n    // Handle < and > as comparison operators\n    newText = newText.replace(CJK_LESS_THAN, '$1 $2 $3');\n    newText = newText.replace(LESS_THAN_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_LESS_THAN_ANS, '$1 $2 $3');\n    newText = newText.replace(CJK_GREATER_THAN, '$1 $2 $3');\n    newText = newText.replace(GREATER_THAN_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_GREATER_THAN_ANS, '$1 $2 $3');\n\n    // Add space before filesystem paths after CJK\n    // Unix absolute paths: \"和/root\" -> \"和 /root\"\n    newText = newText.replace(CJK_UNIX_ABSOLUTE_FILE_PATH, '$1 $2');\n    // Unix relative paths: \"檢查src/main.py\" -> \"檢查 src/main.py\"\n    newText = newText.replace(CJK_UNIX_RELATIVE_FILE_PATH, '$1 $2');\n    // Windows paths: \"檔案在C:\\Users\" -> \"檔案在 C:\\Users\"\n    newText = newText.replace(CJK_WINDOWS_PATH, '$1 $2');\n\n    // Add space after Unix paths ending with / before CJK\n    // Absolute paths: \"/home/與\" -> \"/home/ 與\"\n    newText = newText.replace(UNIX_ABSOLUTE_FILE_PATH_SLASH_CJK, '$1 $2');\n    // Relative paths: \"build/temp/目錄\" -> \"build/temp/ 目錄\"\n    newText = newText.replace(UNIX_RELATIVE_FILE_PATH_SLASH_CJK, '$1 $2');\n\n    // Context-aware slash handling: single slash = operator, multiple slashes = separator\n    // But exclude slashes that are part of file paths by protecting them first\n    if (slashCount === 1) {\n      // Temporarily protect file paths from slash operator processing\n      const FILE_PATH_PLACEHOLDER = '\\uE000'; // Private Use Area character\n      const filePaths: string[] = [];\n      let pathIndex = 0;\n\n      // Store all file paths and replace with placeholders\n      const allFilePathPattern = new RegExp(`(${UNIX_ABSOLUTE_FILE_PATH.source}|${UNIX_RELATIVE_FILE_PATH.source})`, 'g');\n      newText = newText.replace(allFilePathPattern, (match) => {\n        filePaths[pathIndex] = match;\n        return `${FILE_PATH_PLACEHOLDER}${pathIndex++}\\uE001`;\n      });\n\n      // Now apply slash operator spacing\n      newText = newText.replace(CJK_SLASH_CJK, '$1 $2 $3');\n      newText = newText.replace(CJK_SLASH_ANS, '$1 $2 $3');\n      newText = newText.replace(ANS_SLASH_CJK, '$1 $2 $3');\n      newText = newText.replace(ANS_SLASH_ANS, '$1 $2 $3');\n\n      // Restore file paths\n      const FILE_PATH_RESTORE = new RegExp(`${FILE_PATH_PLACEHOLDER}(\\\\d+)\\uE001`, 'g');\n      newText = newText.replace(FILE_PATH_RESTORE, (_match, index) => {\n        return filePaths[parseInt(index, 10)] || '';\n      });\n    }\n    // If multiple slashes, treat as separator - do nothing (no spaces)\n\n    // Restore compound words from placeholders\n    const COMPOUND_WORD_RESTORE = new RegExp(`${COMPOUND_WORD_PLACEHOLDER}(\\\\d+)\\uE003`, 'g');\n    newText = newText.replace(COMPOUND_WORD_RESTORE, (_match, index) => {\n      return compoundWords[parseInt(index, 10)] || '';\n    });\n\n    newText = newText.replace(CJK_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_CJK, '$1 $2');\n    newText = newText.replace(ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1 $2$3$4');\n    newText = newText.replace(LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK, '$1$2$3 $4');\n\n    newText = newText.replace(AN_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_AN, '$1 $2');\n\n    newText = newText.replace(CJK_ANS, '$1 $2');\n    newText = newText.replace(ANS_CJK, '$1 $2');\n\n    newText = newText.replace(S_A, '$1 $2');\n\n    newText = newText.replace(MIDDLE_DOT, '・');\n\n    // Brackets: <fcontentl> (fcontentl) [fcontentl] {fcontentl}\n    // f: the first character inside the brackets\n    // l: the last character inside the brackets\n    // content: the content inside the brackets but exclude the first and last characters\n    // DO NOT change the first and last characters inside brackets AT ALL\n    // ONLY spacing the content between them\n\n    // Fix spacing inside brackets according to the above rules:\n    // Ensure no unwanted spaces immediately after opening or before closing brackets\n    const fixBracketSpacing = (text: string): string => {\n      // Process each bracket type\n      const processBracket = (pattern: RegExp, openBracket: string, closeBracket: string) => {\n        text = text.replace(pattern, (_match, innerContent) => {\n          if (!innerContent) {\n            return `${openBracket}${closeBracket}`;\n          }\n\n          // Remove spaces at the very beginning and end of content\n          const trimmedContent = innerContent.replace(/^ +| +$/g, '');\n\n          return `${openBracket}${trimmedContent}${closeBracket}`;\n        });\n      };\n\n      // Only process < > as brackets if they're not HTML tags\n      // HTML tags have already been protected by placeholders\n      processBracket(/<([^<>]*)>/g, '<', '>');\n      processBracket(/\\(([^()]*)\\)/g, '(', ')');\n      processBracket(/\\[([^\\[\\]]*)\\]/g, '[', ']');\n      processBracket(/\\{([^{}]*)\\}/g, '{', '}');\n\n      return text;\n    };\n\n    newText = fixBracketSpacing(newText);\n\n    // Restore HTML tags from placeholders (only if HTML processing occurred)\n    if (hasHtmlTags) {\n      const HTML_TAG_RESTORE = new RegExp(`${HTML_TAG_PLACEHOLDER}(\\\\d+)\\u0000`, 'g');\n      newText = newText.replace(HTML_TAG_RESTORE, (_match, index) => {\n        return htmlTags[parseInt(index, 10)] || '';\n      });\n    }\n\n    // TODO: TBD\n    // Final fix for HTML comments: ensure no space after <!--\n    // This is needed because <!-- is not protected as an HTML tag\n    // and the ! character gets spaced by ANS_CJK pattern\n    // newText = newText.replace(/<!--\\s+/g, '<!--');\n\n    return newText;\n  }\n\n  // alias for spacingText()\n  public spacing(text: string) {\n    return this.spacingText(text);\n  }\n\n  public hasProperSpacing(text: string) {\n    return this.spacingText(text) === text;\n  }\n\n  protected convertToFullwidth(symbols: string): string {\n    // prettier-ignore\n    return symbols\n      .replace(/~/g, '～')\n      .replace(/!/g, '！')\n      .replace(/;/g, '；')\n      .replace(/:/g, '：')\n      .replace(/,/g, '，')\n      .replace(/\\./g, '。')\n      .replace(/\\?/g, '？');\n  }\n}\n\nexport const pangu = new Pangu();\n\nexport { ANY_CJK };\n\nexport default pangu;\n","import { Pangu } from '../shared';\n\nexport interface AutoSpacingPageConfig {\n  pageDelayMs?: number;\n  nodeDelayMs?: number;\n  nodeMaxWaitMs?: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction once<T extends (...args: any[]) => any>(func: T) {\n  let executed = false;\n  return function (...args: Parameters<T>) {\n    if (executed) {\n      return undefined;\n    }\n    executed = true;\n    return func(...args);\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction debounce<T extends (...args: any[]) => void>(func: T, delay: number, mustRunDelay: number = Infinity) {\n  let timer: number | null = null;\n  let startTime: number | null = null;\n\n  return function (...args: Parameters<T>) {\n    const currentTime = Date.now();\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    if (!startTime) {\n      startTime = currentTime;\n    }\n\n    if (currentTime - startTime >= mustRunDelay) {\n      func(...args);\n      startTime = currentTime;\n    } else {\n      timer = window.setTimeout(() => {\n        func(...args);\n      }, delay);\n    }\n  };\n}\n\nexport class BrowserPangu extends Pangu {\n  public isAutoSpacingPageExecuted: boolean;\n  protected autoSpacingPageObserver: MutationObserver | null;\n\n  public blockTags: RegExp;\n  public ignoredTags: RegExp;\n  public presentationalTags: RegExp;\n  public spaceLikeTags: RegExp;\n  public spaceSensitiveTags: RegExp;\n  public ignoredClass: string;\n\n  constructor() {\n    super();\n\n    this.isAutoSpacingPageExecuted = false;\n    this.autoSpacingPageObserver = null;\n\n    this.blockTags = /^(div|p|h1|h2|h3|h4|h5|h6)$/i;\n    this.ignoredTags = /^(code|pre|script|style|textarea|iframe|input)$/i;\n    this.presentationalTags = /^(b|code|del|em|i|s|strong|kbd)$/i;\n    this.spaceLikeTags = /^(br|hr|i|img|pangu)$/i;\n    this.spaceSensitiveTags = /^(a|del|pre|s|strike|u)$/i;\n    this.ignoredClass = 'no-pangu-spacing';\n  }\n\n  public autoSpacingPage({ pageDelayMs = 1000, nodeDelayMs = 500, nodeMaxWaitMs = 2000 }: AutoSpacingPageConfig = {}) {\n    if (!(document.body instanceof Node)) {\n      return;\n    }\n\n    if (this.isAutoSpacingPageExecuted) {\n      return;\n    }\n\n    this.isAutoSpacingPageExecuted = true;\n\n    // FIXME\n    // Dirty hack for https://github.com/vinta/pangu.js/issues/117\n    const spacingPageOnce = once(() => {\n      this.spacingPage();\n    });\n    const videos = document.getElementsByTagName('video');\n    if (videos.length === 0) {\n      setTimeout(() => {\n        spacingPageOnce();\n      }, pageDelayMs);\n    } else {\n      for (let i = 0; i < videos.length; i++) {\n        const video = videos[i];\n        if (video.readyState === 4) {\n          setTimeout(() => {\n            spacingPageOnce();\n          }, 3000);\n          break;\n        }\n        video.addEventListener('loadeddata', () => {\n          setTimeout(() => {\n            spacingPageOnce();\n          }, 4000);\n        });\n      }\n    }\n\n    this.setupAutoSpacingPageObserver(nodeDelayMs, nodeMaxWaitMs);\n  }\n\n  public spacingPage() {\n    this.spacingPageTitle();\n    this.spacingPageBody();\n  }\n\n  public spacingPageTitle() {\n    const xPathQuery = '/html/head/title/text()';\n    this.spacingNodeByXPath(xPathQuery, document);\n  }\n\n  public spacingPageBody() {\n    // // >> 任意位置的節點\n    // . >> 當前節點\n    // .. >> 父節點\n    // [] >> 條件\n    // text() >> 節點的文字內容，例如 hello 之於 <tag>hello</tag>\n    // https://www.w3schools.com/xml/xpath_syntax.asp\n    //\n    // [@contenteditable]\n    // 帶有 contenteditable 屬性的節點\n    //\n    // normalize-space(.)\n    // 當前節點的頭尾的空白字元都會被移除，大於兩個以上的空白字元會被置換成單一空白\n    // https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/normalize-space\n    //\n    // name(..)\n    // 父節點的名稱\n    // https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/name\n    //\n    // translate(string, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"abcdefghijklmnopqrstuvwxyz\")\n    // 將 string 轉換成小寫，因為 XML 是 case-sensitive 的\n    // https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/translate\n    //\n    // 1. 處理 <title>\n    // 2. 處理 <body> 底下的節點\n    // 3. 略過 contentEditable 的節點\n    // 4. 略過特定節點，例如 <script> 和 <style>\n    //\n    // 注意，以下的 query 只會取出各節點的 text 內容！\n    let xPathQuery = '/html/body//*/text()[normalize-space(.)]';\n    for (const tag of ['script', 'style', 'textarea']) {\n      // 理論上這幾個 tag 裡面不會包含其他 tag\n      // 所以可以直接用 .. 取父節點\n      // 例如 [translate(name(..), \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"abcdefghijklmnopqrstuvwxyz\") != \"script\"]\n      xPathQuery = `${xPathQuery}[translate(name(..),\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\"abcdefghijklmnopqrstuvwxyz\")!=\"${tag}\"]`;\n    }\n    this.spacingNodeByXPath(xPathQuery, document);\n  }\n\n  public spacingNode(contextNode: Node) {\n    let xPathQuery = './/*/text()[normalize-space(.)]';\n    if (contextNode instanceof Element && contextNode.children && contextNode.children.length === 0) {\n      xPathQuery = './/text()[normalize-space(.)]';\n    }\n    this.spacingNodeByXPath(xPathQuery, contextNode);\n  }\n\n  public spacingElementById(idName: string) {\n    const xPathQuery = `id(\"${idName}\")//text()`;\n    this.spacingNodeByXPath(xPathQuery, document);\n  }\n\n  public spacingElementByClassName(className: string) {\n    const xPathQuery = `//*[contains(concat(\" \", normalize-space(@class), \" \"), \"${className}\")]//text()`;\n    this.spacingNodeByXPath(xPathQuery, document);\n  }\n\n  public spacingElementByTagName(tagName: string) {\n    const xPathQuery = `//${tagName}//text()`;\n    this.spacingNodeByXPath(xPathQuery, document);\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n  public spacingNodeByXPath(xPathQuery: string, contextNode: Node) {\n    // DocumentFragments don't support XPath queries\n    if (!(contextNode instanceof Node) || contextNode instanceof DocumentFragment) {\n      return;\n    }\n\n    // 因為 xPathQuery 會是用 text() 結尾，所以這些 nodes 會是 text 而不是 DOM element\n    // snapshotLength 要配合 XPathResult.ORDERED_NODE_SNAPSHOT_TYPE 使用\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate\n    // https://developer.mozilla.org/en-US/docs/Web/API/XPathResult\n    const textNodes = document.evaluate(xPathQuery, contextNode, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n\n    let currentTextNode: Node | null;\n    let nextTextNode: Node | null = null;\n\n    // 從最下面、最裡面的節點開始，所以是倒序的\n    for (let i = textNodes.snapshotLength - 1; i > -1; --i) {\n      currentTextNode = textNodes.snapshotItem(i);\n      if (!currentTextNode) {\n        continue;\n      }\n\n      if (currentTextNode.parentNode && this.isSpecificTag(currentTextNode.parentNode, this.presentationalTags) && !this.isInsideSpecificTag(currentTextNode.parentNode, this.ignoredTags)) {\n        const elementNode = currentTextNode.parentNode;\n\n        if (elementNode.previousSibling) {\n          const { previousSibling } = elementNode;\n          if (previousSibling.nodeType === Node.TEXT_NODE) {\n            const testText = (previousSibling as Text).data.slice(-1) + (currentTextNode as Text).data.charAt(0);\n            const testNewText = this.spacingText(testText);\n            if (testText !== testNewText) {\n              (previousSibling as Text).data = `${(previousSibling as Text).data} `;\n            }\n          }\n        }\n\n        if (elementNode.nextSibling) {\n          const { nextSibling } = elementNode;\n          if (nextSibling.nodeType === Node.TEXT_NODE) {\n            const testText = (currentTextNode as Text).data.slice(-1) + (nextSibling as Text).data.charAt(0);\n            const testNewText = this.spacingText(testText);\n            if (testText !== testNewText) {\n              (nextSibling as Text).data = ` ${(nextSibling as Text).data}`;\n            }\n          }\n        }\n      }\n\n      if (this.canIgnoreNode(currentTextNode)) {\n        nextTextNode = currentTextNode;\n        continue;\n      }\n\n      if (currentTextNode instanceof Text) {\n        const newText = this.spacingText(currentTextNode.data);\n        if (currentTextNode.data !== newText) {\n          currentTextNode.data = newText;\n        }\n      }\n\n      // 處理嵌套的 <tag> 中的文字\n      if (nextTextNode) {\n        // TODO\n        // 現在只是簡單地判斷相鄰的下一個 node 是不是 <br>\n        // 萬一遇上嵌套的標籤就不行了\n        if (currentTextNode.nextSibling && this.spaceLikeTags.test(currentTextNode.nextSibling.nodeName)) {\n          nextTextNode = currentTextNode;\n          continue;\n        }\n\n        // currentTextNode 的最後一個字 + nextTextNode 的第一個字\n        if (!(currentTextNode instanceof Text) || !(nextTextNode instanceof Text)) {\n          continue;\n        }\n        const testText = currentTextNode.data.slice(-1) + nextTextNode.data.slice(0, 1);\n        const testNewText = this.spacingText(testText);\n        if (testNewText !== testText) {\n          // 往上找 nextTextNode 的 parent node\n          // 直到遇到 spaceSensitiveTags\n          // 而且 nextTextNode 必須是第一個 text child\n          // 才能把空格加在 nextTextNode 的前面\n          let nextNode: Node = nextTextNode;\n          while (nextNode.parentNode && !this.spaceSensitiveTags.test(nextNode.nodeName) && this.isFirstTextChild(nextNode.parentNode, nextNode)) {\n            nextNode = nextNode.parentNode;\n          }\n\n          let currentNode: Node = currentTextNode;\n          while (currentNode.parentNode && !this.spaceSensitiveTags.test(currentNode.nodeName) && this.isLastTextChild(currentNode.parentNode, currentNode)) {\n            currentNode = currentNode.parentNode;\n          }\n\n          if (currentNode.nextSibling) {\n            if (this.spaceLikeTags.test(currentNode.nextSibling.nodeName)) {\n              nextTextNode = currentTextNode;\n              continue;\n            }\n          }\n\n          if (!this.blockTags.test(currentNode.nodeName)) {\n            if (!this.spaceSensitiveTags.test(nextNode.nodeName)) {\n              if (!this.ignoredTags.test(nextNode.nodeName) && !this.blockTags.test(nextNode.nodeName)) {\n                if (nextTextNode.previousSibling) {\n                  if (!this.spaceLikeTags.test(nextTextNode.previousSibling.nodeName)) {\n                    if (nextTextNode instanceof Text) {\n                      nextTextNode.data = ` ${nextTextNode.data}`;\n                    }\n                  }\n                } else {\n                  // dirty hack\n                  if (!this.canIgnoreNode(nextTextNode)) {\n                    if (nextTextNode instanceof Text) {\n                      nextTextNode.data = ` ${nextTextNode.data}`;\n                    }\n                  }\n                }\n              }\n            } else if (!this.spaceSensitiveTags.test(currentNode.nodeName)) {\n              if (currentTextNode instanceof Text) {\n                currentTextNode.data = `${currentTextNode.data} `;\n              }\n            } else {\n              const panguSpace = document.createElement('pangu');\n              panguSpace.innerHTML = ' ';\n\n              // 避免一直被加空格\n              if (nextNode.parentNode) {\n                if (nextNode.previousSibling) {\n                  if (!this.spaceLikeTags.test(nextNode.previousSibling.nodeName)) {\n                    nextNode.parentNode.insertBefore(panguSpace, nextNode);\n                  }\n                } else {\n                  nextNode.parentNode.insertBefore(panguSpace, nextNode);\n                }\n              }\n\n              // TODO\n              // 主要是想要避免在元素（通常都是 <li>）的開頭加空格\n              // 這個做法有點蠢，但是不管還是先硬上\n              if (!panguSpace.previousElementSibling) {\n                if (panguSpace.parentNode) {\n                  panguSpace.parentNode.removeChild(panguSpace);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      nextTextNode = currentTextNode;\n    }\n  }\n\n  public stopAutoSpacingPage() {\n    if (this.autoSpacingPageObserver) {\n      this.autoSpacingPageObserver.disconnect();\n      this.autoSpacingPageObserver = null;\n    }\n\n    this.isAutoSpacingPageExecuted = false;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected isContentEditable(node: any) {\n    return node.isContentEditable || (node.getAttribute && node.getAttribute('g_editable') === 'true');\n  }\n\n  protected isSpecificTag(node: Node, tagRegex: RegExp) {\n    return node && node.nodeName && tagRegex.test(node.nodeName);\n  }\n\n  protected isInsideSpecificTag(node: Node, tagRegex: RegExp, checkCurrent = false) {\n    let currentNode = node;\n    if (checkCurrent) {\n      if (this.isSpecificTag(currentNode, tagRegex)) {\n        return true;\n      }\n    }\n    while (currentNode.parentNode) {\n      currentNode = currentNode.parentNode;\n      if (this.isSpecificTag(currentNode, tagRegex)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected hasIgnoredClass(node: Node) {\n    // Check the node itself if it's an element\n    if (node instanceof Element && node.classList.contains(this.ignoredClass)) {\n      return true;\n    }\n    // Check the parent node (for text nodes)\n    if (node.parentNode && node.parentNode instanceof Element && node.parentNode.classList.contains(this.ignoredClass)) {\n      return true;\n    }\n    return false;\n  }\n\n  protected canIgnoreNode(node: Node) {\n    let currentNode = node;\n    if (currentNode && (this.isSpecificTag(currentNode, this.ignoredTags) || this.isContentEditable(currentNode) || this.hasIgnoredClass(currentNode))) {\n      // We will skip processing any children of ignored elements, so don't need to check all ancestors\n      return true;\n    }\n    while (currentNode.parentNode) {\n      currentNode = currentNode.parentNode;\n      if (currentNode && (this.isSpecificTag(currentNode, this.ignoredTags) || this.isContentEditable(currentNode))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected isFirstTextChild(parentNode: Node, targetNode: Node) {\n    const { childNodes } = parentNode;\n\n    // 只判斷第一個含有 text 的 node\n    for (let i = 0; i < childNodes.length; i++) {\n      const childNode = childNodes[i];\n      if (childNode.nodeType !== Node.COMMENT_NODE && childNode.textContent) {\n        return childNode === targetNode;\n      }\n    }\n    return false;\n  }\n\n  protected isLastTextChild(parentNode: Node, targetNode: Node) {\n    const { childNodes } = parentNode;\n\n    // 只判斷倒數第一個含有 text 的 node\n    for (let i = childNodes.length - 1; i > -1; i--) {\n      const childNode = childNodes[i];\n      if (childNode.nodeType !== Node.COMMENT_NODE && childNode.textContent) {\n        return childNode === targetNode;\n      }\n    }\n    return false;\n  }\n\n  protected setupAutoSpacingPageObserver(nodeDelayMs: number, nodeMaxWaitMs: number) {\n    // Disconnect any existing auto-spacing observer\n    if (this.autoSpacingPageObserver) {\n      this.autoSpacingPageObserver.disconnect();\n      this.autoSpacingPageObserver = null;\n    }\n\n    const queue: Node[] = [];\n\n    const debouncedSpacingTitle = debounce(\n      () => {\n        this.spacingPageTitle();\n      },\n      nodeDelayMs,\n      nodeMaxWaitMs,\n    );\n\n    const debouncedSpacingNode = debounce(\n      () => {\n        // NOTE: a single node could be very big which contains a lot of child nodes\n        while (queue.length) {\n          const node = queue.shift();\n          if (node) {\n            this.spacingNode(node);\n          }\n        }\n      },\n      nodeDelayMs,\n      nodeMaxWaitMs,\n    );\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n    this.autoSpacingPageObserver = new MutationObserver((mutations) => {\n      let titleChanged = false;\n\n      // Element: https://developer.mozilla.org/en-US/docs/Web/API/Element\n      // Text: https://developer.mozilla.org/en-US/docs/Web/API/Text\n      for (const mutation of mutations) {\n        // Skip to avoid double processing - title handled separately by debouncedSpacingTitle()\n        if (mutation.target.parentNode?.nodeName === 'TITLE' || mutation.target.nodeName === 'TITLE') {\n          titleChanged = true;\n          continue;\n        }\n\n        // Queue parent elements for spacing processing\n        switch (mutation.type) {\n          case 'characterData':\n            // Text content changed (e.g., textContent = '新文字new text')\n            const { target: node } = mutation;\n            if (node.nodeType === Node.TEXT_NODE && node.parentNode) {\n              // <p>Hello 世界</p>\n              // \"Hello 世界\" is the text node, <p> is the parent element\n              queue.push(node.parentNode); // Queue parent element, not text node\n            }\n            break;\n          case 'childList':\n            // New nodes added to DOM (e.g., innerHTML change, appendChild)\n            for (const node of mutation.addedNodes) {\n              if (node.nodeType === Node.ELEMENT_NODE) {\n                queue.push(node); // Element added, process its text content\n              } else if (node.nodeType === Node.TEXT_NODE && node.parentNode) {\n                queue.push(node.parentNode); // Text node added, process its parent\n              }\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (titleChanged) {\n        debouncedSpacingTitle();\n      }\n\n      debouncedSpacingNode();\n    });\n\n    // NOTE: A single MutationObserver can observe multiple targets simultaneously\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe:\n\n    // Observe page content changes\n    this.autoSpacingPageObserver.observe(document.body, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n\n    // Observe page title changes\n    this.autoSpacingPageObserver.observe(document.head, {\n      characterData: true,\n      childList: true,\n      subtree: true, // Need subtree to observe text node changes inside title\n    });\n  }\n}\n\nexport const pangu = new BrowserPangu();\n\nexport default pangu;\n","import pangu, { BrowserPangu } from './pangu';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(pangu as any).BrowserPangu = BrowserPangu;\n\n// Declare global for UMD builds\ndeclare global {\n  interface Window {\n    pangu: typeof pangu & { BrowserPangu: typeof BrowserPangu };\n  }\n}\n\nexport default pangu;\n"],"names":["self","text","node"],"mappings":"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"}