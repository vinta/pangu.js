{"version":3,"file":"index.js","sources":["../../src/shared/index.ts"],"sourcesContent":["// CJK is short for Chinese, Japanese, and Korean:\n// \\u2e80-\\u2eff CJK Radicals Supplement\n// \\u2f00-\\u2fdf Kangxi Radicals\n// \\u3040-\\u309f Hiragana\n// \\u30a0-\\u30ff Katakana\n// \\u3100-\\u312f Bopomofo\n// \\u3200-\\u32ff Enclosed CJK Letters and Months\n// \\u3400-\\u4dbf CJK Unified Ideographs Extension A\n// \\u4e00-\\u9fff CJK Unified Ideographs\n// \\uf900-\\ufaff CJK Compatibility Ideographs\n//\n// ANS is short for Alphabets, Numbers, and Symbols:\n// A includes A-Za-z\\u0370-\\u03ff\n// N includes 0-9\n// S includes `~!@#$%^&*()-_=+[]{}\\|;:'\",<.>/?\n//\n// All J below does not include \\u30fb\n// Some S below does not include all symbols\n//\n// For more information about Unicode blocks, see\n// https://symbl.cc/en/unicode-table/\n\nconst CJK = '\\u2e80-\\u2eff\\u2f00-\\u2fdf\\u3040-\\u309f\\u30a0-\\u30fa\\u30fc-\\u30ff\\u3100-\\u312f\\u3200-\\u32ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff';\n\n// prettier-ignore\n// Unix absolute paths: system dirs + common project paths\n// Examples: /home, /usr/bin, /etc/nginx.conf, /.bashrc, /node_modules/@babel/core, /path/to/your/project\nconst UNIX_ABSOLUTE_FILE_PATH = /\\/(?:\\.?(?:home|root|usr|etc|var|opt|tmp|dev|mnt|proc|sys|bin|boot|lib|media|run|sbin|srv|node_modules|path|project|src|dist|test|tests|docs|templates|assets|public|static|config|scripts|tools|build|out|target|your)|\\.(?:[A-Za-z0-9_\\-]+))(?:\\/[A-Za-z0-9_\\-\\.@\\+\\*]+)*/;\n\n// prettier-ignore\n// Unix relative paths common in documentation and blog posts\n// Examples: src/main.py, dist/index.js, test/spec.js, ./.claude/CLAUDE.md, templates/*.html\nconst UNIX_RELATIVE_FILE_PATH = /(?:\\.\\/)?(?:src|dist|test|tests|docs|templates|assets|public|static|config|scripts|tools|build|out|target|node_modules|\\.claude|\\.git|\\.vscode)(?:\\/[A-Za-z0-9_\\-\\.@\\+\\*]+)+/;\n\n// Windows paths: C:\\Users\\name\\, D:\\Program Files\\, C:\\Windows\\System32\nconst WINDOWS_FILE_PATH = /[A-Z]:\\\\(?:[A-Za-z0-9_\\-\\. ]+\\\\?)+/;\n\nconst ANY_CJK = new RegExp(`[${CJK}]`);\n\n// The symbol part only includes ~ ! ; : , . ? but . only matches one character\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK = new RegExp(`([${CJK}])[ ]*([\\\\:]+|\\\\.)[ ]*([${CJK}])`, 'g');\nconst CONVERT_TO_FULLWIDTH_CJK_SYMBOLS = new RegExp(`([${CJK}])[ ]*([~\\\\!;,\\\\?]+)[ ]*`, 'g');\nconst DOTS_CJK = new RegExp(`([\\\\.]{2,}|\\u2026)([${CJK}])`, 'g');\nconst FIX_CJK_COLON_ANS = new RegExp(`([${CJK}])\\\\:([A-Z0-9\\\\(\\\\)])`, 'g');\n\n// The symbol part does not include '\nconst CJK_QUOTE = new RegExp(`([${CJK}])([\\`\"\\u05f4])`, 'g');\nconst QUOTE_CJK = new RegExp(`([\\`\"\\u05f4])([${CJK}])`, 'g');\nconst FIX_QUOTE_ANY_QUOTE = /([`\"\\u05f4]+)[ ]*(.+?)[ ]*([`\"\\u05f4]+)/g;\n\n// Handle curly quotes with alphanumeric characters\n// These patterns should only apply to curly quotes, not straight quotes\n// Straight quotes are already handled by CJK_QUOTE, QUOTE_CJK and FIX_QUOTE_ANY_QUOTE\nconst QUOTE_AN = /([\\u201d])([A-Za-z0-9])/g; // Only closing curly quotes + AN\n\n// Special handling for straight quotes followed by alphanumeric after CJK\n// This catches patterns like: 社\"DF where the quote appears to be closing a quoted CJK phrase\nconst CJK_QUOTE_AN = new RegExp(`([${CJK}])(\")([A-Za-z0-9])`, 'g');\n\nconst CJK_SINGLE_QUOTE_BUT_POSSESSIVE = new RegExp(`([${CJK}])('[^s])`, 'g');\nconst SINGLE_QUOTE_CJK = new RegExp(`(')([${CJK}])`, 'g');\nconst FIX_POSSESSIVE_SINGLE_QUOTE = new RegExp(`([A-Za-z0-9${CJK}])( )('s)`, 'g');\n\nconst HASH_ANS_CJK_HASH = new RegExp(`([${CJK}])(#)([${CJK}]+)(#)([${CJK}])`, 'g');\nconst CJK_HASH = new RegExp(`([${CJK}])(#([^ ]))`, 'g');\nconst HASH_CJK = new RegExp(`(([^ ])#)([${CJK}])`, 'g');\n\n// The symbol part only includes + - * = & (excluding | / < >)\nconst CJK_OPERATOR_ANS = new RegExp(`([${CJK}])([\\\\+\\\\-\\\\*=&])([A-Za-z0-9])`, 'g');\nconst ANS_OPERATOR_CJK = new RegExp(`([A-Za-z0-9])([\\\\+\\\\-\\\\*=&])([${CJK}])`, 'g');\n// Handle operators between alphanumeric characters when CJK is present in text\n// But exclude hyphens that are part of compound words\nconst ANS_OPERATOR_ANS = new RegExp(`([A-Za-z0-9])([\\\\+\\\\*=&])([A-Za-z0-9])`, 'g');\n// Special pattern for hyphens that are NOT part of compound words or dates\n// Space hyphens in these cases: letter-letter, letter-number, number-letter, version ranges (letter+number-number)\n// But NOT: pure number-number (dates like 2016-12-26)\nconst ANS_HYPHEN_ANS_NOT_COMPOUND = new RegExp(`([A-Za-z])(-(?![a-z]))([A-Za-z0-9])|([A-Za-z]+[0-9]+)(-(?![a-z]))([0-9])|([0-9])(-(?![a-z0-9]))([A-Za-z])`, 'g');\n\n// Slash patterns for operator vs separator behavior\nconst CJK_SLASH_CJK = new RegExp(`([${CJK}])([/])([${CJK}])`, 'g');\nconst CJK_SLASH_ANS = new RegExp(`([${CJK}])([/])([A-Za-z0-9])`, 'g');\nconst ANS_SLASH_CJK = new RegExp(`([A-Za-z0-9])([/])([${CJK}])`, 'g');\nconst ANS_SLASH_ANS = new RegExp(`([A-Za-z0-9])([/])([A-Za-z0-9])`, 'g');\n\n// Special handling for single letter grades/ratings (A+, B-, C*) before CJK\n// These should have space after the operator, not before\n// Use word boundary to ensure it's a single letter, not part of a longer word\nconst SINGLE_LETTER_GRADE_CJK = new RegExp(`\\\\b([A-Za-z])([\\\\+\\\\-\\\\*])([${CJK}])`, 'g');\n\n// Special handling for < and > as comparison operators (not brackets)\nconst CJK_LESS_THAN = new RegExp(`([${CJK}])(<)([A-Za-z0-9])`, 'g');\nconst LESS_THAN_CJK = new RegExp(`([A-Za-z0-9])(<)([${CJK}])`, 'g');\nconst CJK_GREATER_THAN = new RegExp(`([${CJK}])(>)([A-Za-z0-9])`, 'g');\nconst GREATER_THAN_CJK = new RegExp(`([A-Za-z0-9])(>)([${CJK}])`, 'g');\n// Handle < and > between alphanumeric characters when CJK is present in text\nconst ANS_LESS_THAN_ANS = new RegExp(`([A-Za-z0-9])(<)([A-Za-z0-9])`, 'g');\nconst ANS_GREATER_THAN_ANS = new RegExp(`([A-Za-z0-9])(>)([A-Za-z0-9])`, 'g');\n\n// The bracket part only includes ( ) [ ] { } < > “ ”\nconst CJK_LEFT_BRACKET = new RegExp(`([${CJK}])([\\\\(\\\\[\\\\{<>\\u201c])`, 'g');\nconst RIGHT_BRACKET_CJK = new RegExp(`([\\\\)\\\\]\\\\}<>\\u201d])([${CJK}])`, 'g');\nconst ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET = new RegExp(`([A-Za-z0-9${CJK}])[ ]*([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])`, 'g');\nconst LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK = new RegExp(`([\\u201c])([A-Za-z0-9${CJK}\\\\-_ ]+)([\\u201d])[ ]*([A-Za-z0-9${CJK}])`, 'g');\n\nconst AN_LEFT_BRACKET = /([A-Za-z0-9])(?<!\\.[A-Za-z0-9]*)([\\(\\[\\{])/g;\nconst RIGHT_BRACKET_AN = /([\\)\\]\\}])([A-Za-z0-9])/g;\n\n// Special patterns for filesystem paths after CJK\nconst CJK_UNIX_ABSOLUTE_FILE_PATH = new RegExp(`([${CJK}])(${UNIX_ABSOLUTE_FILE_PATH.source})`, 'g');\nconst CJK_UNIX_RELATIVE_FILE_PATH = new RegExp(`([${CJK}])(${UNIX_RELATIVE_FILE_PATH.source})`, 'g');\nconst CJK_WINDOWS_PATH = new RegExp(`([${CJK}])(${WINDOWS_FILE_PATH.source})`, 'g');\n\n// Pattern for Unix paths ending with / followed by CJK\nconst UNIX_ABSOLUTE_FILE_PATH_SLASH_CJK = new RegExp(`(${UNIX_ABSOLUTE_FILE_PATH.source}/)([${CJK}])`, 'g');\nconst UNIX_RELATIVE_FILE_PATH_SLASH_CJK = new RegExp(`(${UNIX_RELATIVE_FILE_PATH.source}/)([${CJK}])`, 'g');\n\nconst CJK_ANS = new RegExp(`([${CJK}])([A-Za-z\\u0370-\\u03ff0-9@\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])`, 'g');\nconst ANS_CJK = new RegExp(`([A-Za-z\\u0370-\\u03ff0-9~\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=!;:,\\\\.\\\\?\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf])([${CJK}])`, 'g');\n\nconst S_A = /(%)([A-Za-z])/g;\n\nconst MIDDLE_DOT = /([ ]*)([\\u00b7\\u2022\\u2027])([ ]*)/g;\n\nexport class Pangu {\n  version: string;\n\n  constructor() {\n    this.version = '6.1.1';\n  }\n\n  public spacingText(text: string) {\n    if (typeof text !== 'string') {\n      console.warn(`spacingText(text) only accepts string but got ${typeof text}`);\n      return text;\n    }\n\n    if (text.length <= 1 || !ANY_CJK.test(text)) {\n      return text;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    let newText = text;\n\n    // HTML tag processing variables\n    const htmlTags: string[] = [];\n    const HTML_TAG_PLACEHOLDER = '\\u0000HTML_TAG_PLACEHOLDER_';\n    let hasHtmlTags = false;\n\n    // Early return for HTML processing if no HTML tags present\n    if (newText.includes('<')) {\n      hasHtmlTags = true;\n      // More specific HTML tag pattern:\n      // - Opening tags: <tagname ...> or <tagname>\n      // - Closing tags: </tagname>\n      // - Self-closing tags: <tagname ... />\n      // This pattern ensures we only match actual HTML tags, not just any < > content\n      const HTML_TAG_PATTERN = /<\\/?[a-zA-Z][a-zA-Z0-9]*(?:\\s+[^>]*)?>/g;\n\n      // Replace all HTML tags with placeholders, but process attribute values\n      newText = newText.replace(HTML_TAG_PATTERN, (match) => {\n        // Process attribute values inside the tag\n        const processedTag = match.replace(/(\\w+)=\"([^\"]*)\"/g, (_attrMatch, attrName, attrValue) => {\n          // Process the attribute value with spacing\n          const processedValue = self.spacingText(attrValue);\n          return `${attrName}=\"${processedValue}\"`;\n        });\n\n        const index = htmlTags.length;\n        htmlTags.push(processedTag);\n        return `${HTML_TAG_PLACEHOLDER}${index}\\u0000`;\n      });\n    }\n\n    // https://stackoverflow.com/questions/4285472/multiple-regex-replace\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK, (_match, leftCjk, symbols, rightCjk) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${leftCjk}${fullwidthSymbols}${rightCjk}`;\n    });\n\n    newText = newText.replace(CONVERT_TO_FULLWIDTH_CJK_SYMBOLS, (_match, cjk, symbols) => {\n      const fullwidthSymbols = self.convertToFullwidth(symbols);\n      return `${cjk}${fullwidthSymbols}`;\n    });\n\n    newText = newText.replace(DOTS_CJK, '$1 $2');\n    newText = newText.replace(FIX_CJK_COLON_ANS, '$1：$2');\n\n    newText = newText.replace(CJK_QUOTE, '$1 $2');\n    newText = newText.replace(QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_QUOTE_ANY_QUOTE, '$1$2$3');\n\n    // Handle quotes with alphanumeric - closing quotes followed by AN need space\n    newText = newText.replace(QUOTE_AN, '$1 $2');\n    // Opening quotes preceded by AN don't need space (they're handled by other patterns)\n\n    // Handle CJK followed by closing quote followed by alphanumeric\n    newText = newText.replace(CJK_QUOTE_AN, '$1$2 $3');\n\n    newText = newText.replace(CJK_SINGLE_QUOTE_BUT_POSSESSIVE, '$1 $2');\n    newText = newText.replace(SINGLE_QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_POSSESSIVE_SINGLE_QUOTE, \"$1's\");\n\n    // Early return for complex patterns that need longer text\n    const textLength = newText.length;\n\n    // Check slash count early to determine hashtag behavior\n    const slashCount = (newText.match(/\\//g) || []).length;\n\n    // Early return for slash processing if no slashes present\n    if (slashCount === 0) {\n      // Apply normal hashtag spacing without slash considerations\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(CJK_HASH, '$1 $2');\n      newText = newText.replace(HASH_CJK, '$1 $3');\n    } else if (slashCount <= 1) {\n      // Single or no slash - apply normal hashtag spacing\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(CJK_HASH, '$1 $2');\n      newText = newText.replace(HASH_CJK, '$1 $3');\n    } else {\n      // Multiple slashes - skip hashtag processing to preserve path structure\n      // But add space before final hashtag if it's not preceded by a slash\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(new RegExp(`([^/])([${CJK}])(#[A-Za-z0-9]+)$`), '$1$2 $3');\n    }\n\n    // Protect compound words from operator spacing\n    const COMPOUND_WORD_PLACEHOLDER = '\\uE002'; // Private Use Area character\n    const compoundWords: string[] = [];\n    let compoundIndex = 0;\n\n    // Pattern to detect compound words: alphanumeric-alphanumeric combinations that look like compound words/product names\n    // Examples: state-of-the-art, machine-learning, GPT-4o, real-time, end-to-end, gpt-4o, GPT-5, claude-4-opus\n    // Match: word-word(s) where at least one part contains lowercase letters OR contains mix of letters and numbers (like GPT-5)\n    const COMPOUND_WORD_PATTERN = /\\b(?:[A-Za-z0-9]*[a-z][A-Za-z0-9]*-[A-Za-z0-9]+|[A-Za-z0-9]+-[A-Za-z0-9]*[a-z][A-Za-z0-9]*|[A-Za-z]+-[0-9]+|[A-Za-z]+[0-9]+-[A-Za-z0-9]+)(?:-[A-Za-z0-9]+)*\\b/g;\n\n    // Store compound words and replace with placeholders\n    newText = newText.replace(COMPOUND_WORD_PATTERN, (match) => {\n      compoundWords[compoundIndex] = match;\n      return `${COMPOUND_WORD_PLACEHOLDER}${compoundIndex++}\\uE003`;\n    });\n\n    // Handle single letter grades (A+, B-, etc.) before general operator rules\n    // This ensures \"A+的\" becomes \"A+ 的\" not \"A + 的\"\n    newText = newText.replace(SINGLE_LETTER_GRADE_CJK, '$1$2 $3');\n\n    newText = newText.replace(CJK_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_HYPHEN_ANS_NOT_COMPOUND, (match, ...groups) => {\n      // Handle all patterns in the alternation\n      if (groups[0] && groups[1] && groups[2]) {\n        // First pattern: letter-alphanumeric\n        return `${groups[0]} ${groups[1]} ${groups[2]}`;\n      } else if (groups[3] && groups[4] && groups[5]) {\n        // Second pattern: version range (letter+number-number)\n        return `${groups[3]} ${groups[4]} ${groups[5]}`;\n      } else if (groups[6] && groups[7] && groups[8]) {\n        // Third pattern: number-letter\n        return `${groups[6]} ${groups[7]} ${groups[8]}`;\n      }\n      return match;\n    });\n\n    // Handle < and > as comparison operators\n    newText = newText.replace(CJK_LESS_THAN, '$1 $2 $3');\n    newText = newText.replace(LESS_THAN_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_LESS_THAN_ANS, '$1 $2 $3');\n    newText = newText.replace(CJK_GREATER_THAN, '$1 $2 $3');\n    newText = newText.replace(GREATER_THAN_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_GREATER_THAN_ANS, '$1 $2 $3');\n\n    // Add space before filesystem paths after CJK\n    // Unix absolute paths: \"和/root\" -> \"和 /root\"\n    newText = newText.replace(CJK_UNIX_ABSOLUTE_FILE_PATH, '$1 $2');\n    // Unix relative paths: \"檢查src/main.py\" -> \"檢查 src/main.py\"\n    newText = newText.replace(CJK_UNIX_RELATIVE_FILE_PATH, '$1 $2');\n    // Windows paths: \"檔案在C:\\Users\" -> \"檔案在 C:\\Users\"\n    newText = newText.replace(CJK_WINDOWS_PATH, '$1 $2');\n\n    // Add space after Unix paths ending with / before CJK\n    // Absolute paths: \"/home/與\" -> \"/home/ 與\"\n    newText = newText.replace(UNIX_ABSOLUTE_FILE_PATH_SLASH_CJK, '$1 $2');\n    // Relative paths: \"build/temp/目錄\" -> \"build/temp/ 目錄\"\n    newText = newText.replace(UNIX_RELATIVE_FILE_PATH_SLASH_CJK, '$1 $2');\n\n    // Context-aware slash handling: single slash = operator, multiple slashes = separator\n    // But exclude slashes that are part of file paths by protecting them first\n    if (slashCount === 1) {\n      // Temporarily protect file paths from slash operator processing\n      const FILE_PATH_PLACEHOLDER = '\\uE000'; // Private Use Area character\n      const filePaths: string[] = [];\n      let pathIndex = 0;\n\n      // Store all file paths and replace with placeholders\n      const allFilePathPattern = new RegExp(`(${UNIX_ABSOLUTE_FILE_PATH.source}|${UNIX_RELATIVE_FILE_PATH.source})`, 'g');\n      newText = newText.replace(allFilePathPattern, (match) => {\n        filePaths[pathIndex] = match;\n        return `${FILE_PATH_PLACEHOLDER}${pathIndex++}\\uE001`;\n      });\n\n      // Now apply slash operator spacing\n      newText = newText.replace(CJK_SLASH_CJK, '$1 $2 $3');\n      newText = newText.replace(CJK_SLASH_ANS, '$1 $2 $3');\n      newText = newText.replace(ANS_SLASH_CJK, '$1 $2 $3');\n      newText = newText.replace(ANS_SLASH_ANS, '$1 $2 $3');\n\n      // Restore file paths\n      const FILE_PATH_RESTORE = new RegExp(`${FILE_PATH_PLACEHOLDER}(\\\\d+)\\uE001`, 'g');\n      newText = newText.replace(FILE_PATH_RESTORE, (_match, index) => {\n        return filePaths[parseInt(index, 10)] || '';\n      });\n    }\n    // If multiple slashes, treat as separator - do nothing (no spaces)\n\n    // Restore compound words from placeholders\n    const COMPOUND_WORD_RESTORE = new RegExp(`${COMPOUND_WORD_PLACEHOLDER}(\\\\d+)\\uE003`, 'g');\n    newText = newText.replace(COMPOUND_WORD_RESTORE, (_match, index) => {\n      return compoundWords[parseInt(index, 10)] || '';\n    });\n\n    newText = newText.replace(CJK_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_CJK, '$1 $2');\n    newText = newText.replace(ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1 $2$3$4');\n    newText = newText.replace(LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK, '$1$2$3 $4');\n\n    newText = newText.replace(AN_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_AN, '$1 $2');\n\n    newText = newText.replace(CJK_ANS, '$1 $2');\n    newText = newText.replace(ANS_CJK, '$1 $2');\n\n    newText = newText.replace(S_A, '$1 $2');\n\n    newText = newText.replace(MIDDLE_DOT, '・');\n\n    // Brackets: <fcontentl> (fcontentl) [fcontentl] {fcontentl}\n    // f: the first character inside the brackets\n    // l: the last character inside the brackets\n    // content: the content inside the brackets but exclude the first and last characters\n    // DO NOT change the first and last characters inside brackets AT ALL\n    // ONLY spacing the content between them\n\n    // Fix spacing inside brackets according to the above rules:\n    // Ensure no unwanted spaces immediately after opening or before closing brackets\n    const fixBracketSpacing = (text: string): string => {\n      // Process each bracket type\n      const processBracket = (pattern: RegExp, openBracket: string, closeBracket: string) => {\n        text = text.replace(pattern, (_match, innerContent) => {\n          if (!innerContent) {\n            return `${openBracket}${closeBracket}`;\n          }\n\n          // Remove spaces at the very beginning and end of content\n          const trimmedContent = innerContent.replace(/^ +| +$/g, '');\n\n          return `${openBracket}${trimmedContent}${closeBracket}`;\n        });\n      };\n\n      // Only process < > as brackets if they're not HTML tags\n      // HTML tags have already been protected by placeholders\n      processBracket(/<([^<>]*)>/g, '<', '>');\n      processBracket(/\\(([^()]*)\\)/g, '(', ')');\n      processBracket(/\\[([^\\[\\]]*)\\]/g, '[', ']');\n      processBracket(/\\{([^{}]*)\\}/g, '{', '}');\n\n      return text;\n    };\n\n    newText = fixBracketSpacing(newText);\n\n    // Restore HTML tags from placeholders (only if HTML processing occurred)\n    if (hasHtmlTags) {\n      const HTML_TAG_RESTORE = new RegExp(`${HTML_TAG_PLACEHOLDER}(\\\\d+)\\u0000`, 'g');\n      newText = newText.replace(HTML_TAG_RESTORE, (_match, index) => {\n        return htmlTags[parseInt(index, 10)] || '';\n      });\n    }\n\n    // TODO: TBD\n    // Final fix for HTML comments: ensure no space after <!--\n    // This is needed because <!-- is not protected as an HTML tag\n    // and the ! character gets spaced by ANS_CJK pattern\n    // newText = newText.replace(/<!--\\s+/g, '<!--');\n\n    return newText;\n  }\n\n  // alias for spacingText()\n  public spacing(text: string) {\n    return this.spacingText(text);\n  }\n\n  public hasProperSpacing(text: string) {\n    return this.spacingText(text) === text;\n  }\n\n  protected convertToFullwidth(symbols: string): string {\n    // prettier-ignore\n    return symbols\n      .replace(/~/g, '～')\n      .replace(/!/g, '！')\n      .replace(/;/g, '；')\n      .replace(/:/g, '：')\n      .replace(/,/g, '，')\n      .replace(/\\./g, '。')\n      .replace(/\\?/g, '？');\n  }\n}\n\nexport const pangu = new Pangu();\n\nexport { ANY_CJK };\n\nexport default pangu;\n"],"names":["text"],"mappings":"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"}